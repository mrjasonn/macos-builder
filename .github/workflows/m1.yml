name: Manual Build
on:
  workflow_call:
    inputs:
      mcpelauncher-manifest-repo:
        description: 'mcpelauncher repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-manifest.git'
        type: string
      mcpelauncher-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'ng'
        type: string
      submodule-refs:
        type: string
        default: "[]"
  workflow_dispatch:
    inputs:
      mcpelauncher-manifest-repo:
        description: 'mcpelauncher repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-manifest.git'
        type: string
      mcpelauncher-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'ng'
        type: string
      submodule-refs:
        type: string
        default: "[]"
      
jobs:
  openssl:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: macos-latest
            deps: ''
            sdkroot: ''
            version: '11.0'
            arch: 'arm64'
            opensslflags: darwin64-arm64
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    steps:
    - name: Setup CMake 3
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.x'
    - name: Cache openssl
      id: cache
      uses: actions/cache@v4
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Build OpenSSL
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        git clone https://github.com/openssl/openssl.git -b openssl-3.2
        $INSDIR = (Get-Location).ToString() + "/output"
        pushd openssl
        perl ./Configure ${{ matrix.opensslflags }} ('--prefix=' + $INSDIR)
        make install_sw
    - name: Create tar archive
      run: |
        install_name_tool -id @rpath/libssl.dylib -add_rpath @loader_path/../Frameworks lib/libssl.dylib || :
        install_name_tool -id @rpath/libcrypto.dylib -add_rpath @loader_path/../Frameworks lib/libcrypto.dylib || :
        tar cJf ../openssl.tar.xz .
      working-directory: output
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}-tar
        path: openssl.tar.xz
  angle:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: macos-latest
            deps: ''
            version: '12.0'
            arch: 'arm64'
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-angle-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    steps:
    - name: Cache angle
      id: cache
      uses: actions/cache@v4
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Checkout angle builder
      uses: actions/checkout@v4
      with:
        repository: mrjasonn/angle-builder
    - name: Install angle-builder
      run: pip install .
    - name: Build angle
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        angle-builder macos-universal --artifact-output-folder $ANGLE_BUILDER_OUTPUT_FOLDER
    - name: Create tar archive
      run: |
        tar cJf ../angle.tar.xz .
      working-directory: output
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: angle-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: angle-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}-tar
        path: angle.tar.xz
  build:
    runs-on: ${{ matrix.OS }}
    needs: [ "openssl" ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - AppImage: false
            OS: macos-latest
            arch: arm64
            version: "11.0"
            container: '{}'
            deps: |
              brew install autoconf automake
              echo 'set(CMAKE_SYSTEM_NAME Darwin)' > toolchain.txt
              echo 'set(CMAKE_SYSTEM_PROCESSOR aarch64)' >> toolchain.txt
            triple: arm64-apple-darwin
            cmakeextraflags: ('-DCMAKE_TOOLCHAIN_FILE='+ $INSDIR + '/../toolchain.txt')
            openssl: true
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      CC: clang
      CXX: clang++
      DEBIAN_FRONTEND: noninteractive
    # container: ${{ fromJson(matrix.container) }}
    steps:
    - name: Setup CMake 3
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.x'
    - uses: actions/checkout@v1
      if: ${{ startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      shell: pwsh
      run: ${{ matrix.deps }}
    - name: Sync Submodule Sources
      uses: actions/github-script@v7
      with:
        github-token: none
        script: |
          var downloadRepo = async function(path, repo, ref) {
            await io.mkdirP(path);
            await exec.exec("git", ["init"], { cwd: path });
            await exec.exec("git", ["remote", "add", "origin", repo], { cwd: path });
            await exec.exec("git", ["fetch", "origin", ref], { cwd: path });
            await exec.exec("git", ["reset", "--hard", "FETCH_HEAD"], { cwd: path });
            await exec.exec("git", ["submodule", "update", "--init", "--recursive"], { cwd: path });
          };
          await downloadRepo("mcpelauncher", process.env.MCPELAUNCHER_REPO, process.env.MCPELAUNCHER_REF);
          var submoduleRefs = JSON.parse(process.env.SUBMODULEREFS);
          for(var submoduleRef of submoduleRefs) {
            if(submoduleRef.project === "mcpelauncher") {
              await exec.exec("git", ["fetch", submoduleRef.origin || "origin", submoduleRef.ref], { cwd: `${submoduleRef.project}/${submoduleRef.path}` });
              await exec.exec("git", ["checkout", "FETCH_HEAD"], { cwd: `${submoduleRef.project}/${submoduleRef.path}` });
            }
          }
      env:
        SUBMODULEREFS: ${{ inputs.submodule-refs || '[]' }}
        MCPELAUNCHER_REPO: ${{ inputs.mcpelauncher-manifest-repo }}
        MCPELAUNCHER_REF: ${{ inputs.mcpelauncher-manifest-ref }}
    - uses: actions/download-artifact@v4
      id: openssl
      if: ${{ matrix.openssl }}
      with:
        name: openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    - name: Building mcpelauncher ${{ inputs.mcpelauncher-manifest-repo }}/${{ inputs.mcpelauncher-manifest-ref }}
      shell: pwsh
      env:
        CC: clang
        CXX: clang++
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        mkdir output
        mkdir build
        $INSDIR = (Get-Location).ToString() + "/output"
        ${{ matrix.envflags }}
        pushd build
        $EXTRA_FLAGS = ''
        if ('${{steps.openssl.outputs.download-path}}' -ne '') {
          brew uninstall --ignore-dependencies openssl@3
          if ($EXTRA_FLAGS -ne '') {
            $EXTRA_FLAGS += ' '
          }
          $EXTRA_FLAGS += '-DOPENSSL_ROOT_DIR=${{steps.openssl.outputs.download-path}}'
        }
        cmake ../mcpelauncher '-DCMAKE_BUILD_TYPE=Release' '-DBUILD_UI=OFF' ('-DCMAKE_INSTALL_PREFIX=' + $INSDIR) -DCMAKE_ASM_FLAGS="--target=${{ matrix.triple }}" -DCMAKE_C_FLAGS="--target=${{ matrix.triple }} ${{ matrix.cflags }}" -DCMAKE_CXX_FLAGS="--target=${{ matrix.triple }} ${{ matrix.cxxflags }}" -DCMAKE_CXX_COMPILER_TARGET=${{ matrix.triple }} $EXTRA_FLAGS ${{ matrix.cmakeextraflags }} '-DMSA_DAEMON_PATH=.' '-DENABLE_DEV_PATHS=OFF' '-DXAL_WEBVIEW_QT_PATH=.'
        make install -j4
        popd
        popd

    - name: Create tar archive
      run: |
        tar cJf ../mcpelauncher.tar.xz .
      working-directory: output
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: mcpelauncher-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
    - name: Upload tar
      uses: actions/upload-artifact@v4
      with:
        name: mcpelauncher-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}-tar
        path: mcpelauncher.tar.xz

